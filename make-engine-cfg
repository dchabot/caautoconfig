#!/usr/bin/env python

import argparse
from CAAutoConfig import utils, files
from sys import stdout, exit
from os import path

src_help = 'File containing a newline-separated list of PVs.\n\
            Could be generated by iocsh, \'epics> dbl > \"/cf-update/mypvlist.dbl\"\',\
            or an autosave \"as/save/info_positions.sav\" file could be used. \
            The file must have a PV name in the 1st column.'
dest_help = 'Destination directory. If not provided, defaults to the current directory.'
regex_help = 'One or more regular expressions to filter PV names.\n\
                \t eg: -r \'^XF:23ID1\' \'.*(?<!_)$\'\n\
                \t This will capture PVs starting with \'XF:23ID1\',\n\
                \t and _not_ ending with an underscore.'
purpose_help = 'Create an \'engine.xml\' file for the EPICS Channel Archiver'

parser = argparse.ArgumentParser(description=purpose_help)
parser.add_argument('-s', '--source', action='store', required=True, help=src_help)
parser.add_argument('-g', '--group', action='store', required=True,\
                        help='Typically, a location (eg: \'11IDA\')')
parser.add_argument('-d', '--destination', action='store', help=dest_help)
parser.add_argument('-r', '--regex', nargs="*", action='store', required=True, help=regex_help)
parser.add_argument('-m', '--monitor', action='store', default=True, help='Defaults to true')
parser.add_argument('-p', '--period', action='store', default=1.0, help='Defaults to 1 second')

engine_xml = 'engine.xml'
engine_preamble = '\
<?xml version="1.0" ?>\n\
<engineconfig>\n\
        <write_period>30</write_period>\n\
        <get_threshold>60</get_threshold>\n\
        <file_size>1000</file_size>\n\
        <ignored_future>6</ignored_future>\n\
        <buffer_reserve>3</buffer_reserve>\n\
        <max_repeat_count>120</max_repeat_count>\n\
\n\
</engineconfig>\n'

def chk_engine_file(rootpath):
    outfile = path.join(rootpath, engine_xml) 
    if not path.exists(outfile):
        #no 'engine.xml' found. Start a new one using 'engine_preamble', above
        print 'No \'engine.xml\' file found. Creating one...'
        dest = open(outfile, 'w')
        dest.write(engine_preamble)
        dest.flush()
        dest.close()
    else:
        #found an existing engine.xml file. Append to it.
        print 'Will append to existing \'engine.xml\' file'
    print 'Writing config to file, \'%s\'' % outfile
    return outfile

def make_engine_config(args=None):
    args = parser.parse_args(args)
    outfile  = ''

    # if no destination file is indicated, use './engine.xml'
    if args.destination is None:
        print 'No destination directory provided. Defaulting to \'./\''
        outfile = chk_engine_file('.')
    else:
        outfile = chk_engine_file(args.destination)

    cafile = files.CAFile(outfile)
    #prepare pv source-file
    src_path = ''
    src_pattern = ''
    if args.source.find(path.sep) < 0:
        src_path,src_pattern = path.curdir + path.sep, args.source
    else: 
        src_path, src_pattern = path.split(args.source)
    pvlist = utils.getCfPVlist(src_path, src_pattern)

    #if xml 'group' does not exist, add it to the destination file 
    group = cafile.findGroup(args.group)
    if group is None:
        group = cafile.createGroup(args.group)
    [group.addPV(pv) for pv in utils.applyRegexToList(pvlist, args.regex)]

    cafile.writeFile(outfile)        


if __name__ == '__main__':
    make_engine_config()
