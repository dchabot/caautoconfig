#!/usr/bin/env python

import argparse
from CAAutoConfig import utils, files
from sys import stdout, exit, argv
from os import path

src_help = 'One or more files containing a newline-separated list of PVs.\n\
            Could be generated by iocsh, \'epics> dbl > \"/cf-update/mypvlist.dbl\"\',\
            or an autosave \"as/save/info_positions.req\" file could be used. \
            The file must have a PV name in the 1st column.\n\
            Source can also be \"-\" to read from stdin, for piping and filtering ease.\n\
            See Examples, below.\n'
dest_help = 'Destination directory. If not provided, defaults to the current directory.'
regex_help = 'One or more regular expressions to filter PV names.\n\
                \t eg: -r \'^XF:23ID1\' \'.*(?<!_)$\'\n\
                \t This will capture PVs starting with \'XF:23ID1\',\n\
                \t and _not_ ending with an underscore.'
purpose_help = 'Create an \'engine.xml\' file for the EPICS Channel Archiver'
usage_help = 'make-engine-cfg source -g <group> [options]'
epilog = 'Examples:\n\
----------------------------\n\n\
Add records from xf23id1-mc02 and xf23id1-mc09 to \"engine.xml\" in the current directory:\n\
-----------------------------\n\
./make-engine-cfg `find /cf-update/xf23id1-ioc1.mc0[29].dbl` -g \'Motors\' -r \'^XF:23ID1\' \'.*(?<!_)$\'\n\
-----------------------------\n\n\
\
The same effect as above using pipes:\n\
------------------------------\n\
find /cf-update/xf23id1-ioc1.mc0[29].dbl  |  xargs cat -  |  ./make-engine-cfg - -g \'Motors\' -r \'^XF:23ID1\' \'.*(?<!_)$\'\n\
------------------------------\n\
    ** NOTE: \'xargs cat -\' must be used here to provide the file content via stdin, as that is what the \'-\' source file argument of make-engine-cfg requires.\n'

parser = argparse.ArgumentParser(usage=usage_help, formatter_class=argparse.RawDescriptionHelpFormatter,\
                                    description=purpose_help, epilog=epilog)
parser.add_argument('source', nargs='*', type=argparse.FileType('r'), default='-', help=src_help)
parser.add_argument('-g', '--group', action='store', required=True, \
                        help='Typically, a location (eg: \'11IDA\')')
parser.add_argument('-d', '--destination', action='store', help=dest_help)
parser.add_argument('-r', '--regex', nargs="*", action='store', help=regex_help)
parser.add_argument('-m', '--monitor', action='store', default=True, help='Defaults to True')
parser.add_argument('-p', '--period', action='store', default=1.0, help='Defaults to 1.0 second')

engine_xml = 'engine.xml'
engine_preamble = '\
<?xml version="1.0" ?>\n\
<engineconfig>\n\
        <write_period>30</write_period>\n\
        <get_threshold>60</get_threshold>\n\
        <file_size>1000</file_size>\n\
        <ignored_future>6</ignored_future>\n\
        <buffer_reserve>3</buffer_reserve>\n\
        <max_repeat_count>120</max_repeat_count>\n\
\n\
</engineconfig>\n'

def chk_engine_file(rootpath):
    outfile = path.join(rootpath, engine_xml) 
    if not path.exists(outfile):
        #no 'engine.xml' found. Start a new one using 'engine_preamble', above
        print 'No \'engine.xml\' file found. Creating one...'
        dest = open(outfile, 'w')
        dest.write(engine_preamble)
        dest.flush()
        dest.close()
    else:
        #found an existing engine.xml file. Append to it.
        print 'Will append to existing \'engine.xml\' file'
    print 'Writing config to file, \'%s\'' % outfile
    return outfile

def make_engine_config(args=None):
    args = parser.parse_args(args)
    outfile  = ''
    pvs = ''

    #print args
    for src in args.source:
       pvs += src.read()
    pvlist = pvs.split()

    # if no destination file is indicated, use './engine.xml'
    if args.destination is None:
        print 'No destination directory provided. Defaulting to \'./\''
        outfile = chk_engine_file('.')
    else:
        outfile = chk_engine_file(args.destination)

    cafile = files.CAFile(outfile)

    #if xml 'group' does not exist, add it to the destination file 
    group = cafile.findGroup(args.group)
    if group is None:
        group = cafile.createGroup(args.group)
    if args.regex is None:
        # without a provided filter, just pass everything through
        args.regex = '.*'
    [group.addPV(pv, period = args.period, monitor = args.monitor) \
            for pv in utils.applyRegexToList(pvlist, args.regex)]

    cafile.writeFile(outfile)        


if __name__ == '__main__':
    make_engine_config()
